!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var o=n(1),i=n(2);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1},s=(o(i,r),i.locals?i.locals:{});e.exports=s},function(e,t,n){"use strict";var o,i=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function a(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},o=[],i=0;i<e.length;i++){var r=e[i],l=t.base?r[0]+t.base:r[0],c=n[l]||0,u="".concat(l," ").concat(c);n[l]=c+1;var d=a(u),p={css:r[1],media:r[2],sourceMap:r[3]};-1!==d?(s[d].references++,s[d].updater(p)):s.push({identifier:u,updater:g(p,t),references:1}),o.push(u)}return o}function c(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var s=r(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,n,o){var i=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=d(t,i);else{var r=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(r,s[t]):e.appendChild(r)}}function h(e,t,n){var o=n.css,i=n.media,r=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),r&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var f=null,m=0;function g(e,t){var n,o,i;if(t.singleton){var r=m++;n=f||(f=c(t)),o=p.bind(null,n,r,!1),i=p.bind(null,n,r,!0)}else n=c(t),o=h.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var i=a(n[o]);s[i].references--}for(var r=l(e,t),c=0;c<n.length;c++){var u=a(n[c]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}n=r}}}},function(e,t,n){(t=n(3)(!1)).push([e.i,".navbar {\n  color: white;\n  background: black;\n}\n\n.lead-line {\n  text-transform: uppercase;\n}\n.headline, .futura {\n  font-family: 'Futura', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n}",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var i=(s=o,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(l," */")),r=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([i]).join("\n")}var s,a,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(o)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(i[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);o&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";n.r(t);n(0);const o=["doctype","html","head","title","base","link","meta","style","script","noscript","body","article","nav","aside","section","header","footer","h1-h6","hgroup","address","p","hr","pre","blockquote","ol","ul","li","dl","dt","dd","figure","figcaption","div","table","caption","thead","tbody","tfoot","tr","th","td","col","colgroup","form","fieldset","legend","label","input","button","select","datalist","optgroup","option","textarea","keygen","output","progress","meter","details","summary","command","menu","del","ins","img","iframe","embed","object","param","video","audio","source","canvas","track","map","area","a","em","strong","i","b","u","s","small","abbr","q","cite","dfn","sub","sup","time","code","kbd","samp","var","mark","bdi","bdo","ruby","rt","rp","span","br","wbr"];class i{constructor(){this.topics={},this.hop=this.topics.hasOwnProperty}on(e,t){this.hop.call(this.topics,e)||(this.topics[e]=[]);const n=this.topics[e].push(t)-1;return{remove:()=>{this.topics[e].splice(n,1)}}}emit(e,t={}){return this.hop.call(this.topics,e)?this.topics[e].forEach(e=>e(t)):this}}function r(e){let t=document.createElement("template");return t.innerHTML=e.trim(),t.content.firstElementChild}class s{constructor(e,t,n={}){this.version="1.4.0",this.target=e,this.urls=[].concat(t),this.html=[],this.options={ssl:!0,host:"www.feedrapp.info",support:!0,limit:null,key:null,layoutTemplate:"<ul>{entries}</ul>",entryTemplate:'<li><a href="{url}">[{author}@{date}] {title}</a><br/>{shortBodyPlain}</li>',tokens:{},outputMode:"json",dateFormat:"dddd MMM Do",dateLocale:"en",offsetStart:!1,offsetEnd:!1,fetchFeed:null,encoding:null,...n},this.events=new i}on(e,t){return this.events.on(`vanilla-rss/${e}`,t),this}render(){return new Promise(async(e,t)=>{try{const e=await this._load();this.feed=e.responseData.feed,this.entries=e.responseData.feed.entries}catch(e){return this.entries=[],this.feed=null,t(e)}const n=this._generateHTMLForEntries();if(this.target.append(n.layout),0!==n.entries.length){this.events.emit("vanilla-rss/data",{rss:this,feed:this.feed,entries:this.entries});const e=(o=n.layout,i="entries",o.tagName.toLowerCase()===i.toLowerCase()?n.layout:n.layout.querySelector("entries"));this._appendEntries(e,n.entries)}var o,i;e()})}_appendEntries(e,t){t.forEach((t,n)=>{var o=this._wrapContent(t);e.insertAdjacentHTML("beforebegin",o.outerHTML)}),e.remove()}_wrapContent(e){return 0!==e.trim().indexOf("<")?r(`<div>${e}</div>`):r(e)}_load(){const e=`${`http${this.options.ssl?"s":""}`}://${this.options.host}`,t={support:this.options.support,version:this.version,q:this.urls.map(e=>encodeURIComponent(e)).join(",")};this.options.offsetStart&&this.options.offsetEnd&&(this.options.limit=this.options.offsetEnd),null!==this.options.limit&&(t.num=this.options.limit),null!==this.options.key&&(t.key=this.options.key),null!==this.options.encoding&&(t.encoding=this.options.encoding),this.options.order&&(t.order=this.options.order);const n=`${e}?${Object.keys(t).map(e=>`${e}=${t[e]}`).join("&")}`;return this._fetchFeed(n)}async _fetchFeed(e){if(this.options.fetchFeed)return await this.options.fetchFeed(e);const t=await fetch(e,{headers:{"Content-Type":"application/json"}});return await t.json()}_generateHTMLForEntries(){const e={entries:[],layout:null};return this.entries.forEach((t,n)=>{const o=this.options.offsetStart,i=this.options.offsetEnd;let r;o&&i?n>=o&&n<=i&&this._isRelevant(t,e.entries)&&(r=this._evaluateStringForEntry(this.options.entryTemplate,t),e.entries.push(r)):this._isRelevant(t,e.entries)&&(r=this._evaluateStringForEntry(this.options.entryTemplate,t),e.entries.push(r))}),this.options.entryTemplate?e.layout=this._wrapContent(this.options.layoutTemplate.replace("{entries}","<entries></entries>")):e.layout=this._wrapContent("<div><entries></entries></div>"),e}_isRelevant(e,t){const n=this._getTokenMap(e);return!this.options.filter||(!this.options.filterLimit||this.options.filterLimit!==t.length)&&this.options.filter(e,n)}_evaluateStringForEntry(e,t){var n=e;return(e.match(/(\{.*?\})/g)||[]).forEach(e=>{n=n.replace(e,this._getValueForToken(e,t))}),n}_getFormattedDate(e){if(this.options.dateFormatFunction)return this.options.dateFormatFunction(e);if("undefined"!=typeof moment){var t=moment(new Date(e));return(t=t.locale?t.locale(this.options.dateLocale):t.lang(this.options.dateLocale)).format(this.options.dateFormat)}return e}_getTokenMap(e){if(!this.feedTokens){var t=JSON.parse(JSON.stringify(this.feed));delete t.entries,this.feedTokens=t}return{feed:this.feedTokens,url:e.link,author:e.author,date:this._getFormattedDate(e.publishedDate),title:e.title,body:e.content,shortBody:e.contentSnippet,bodyPlain:function(e){for(var t=e.content.replace(/<script[\\r\\\s\S]*<\/script>/gim,"").replace(/<\/?[^>]+>/gi,""),n=0;n<o.length;n++)t=t.replace(new RegExp("<"+o[n],"gi"),"");return t}(e),shortBodyPlain:e.contentSnippet.replace(/<\/?[^>]+>/gi,""),index:this.entries.indexOf(e),totalEntries:this.entries.length,teaserImage:function(e){try{return e.content.match(/(<img.*?>)/gi)[0]}catch(e){return""}}(e),teaserImageUrl:function(e){try{return e.content.match(/(<img.*?>)/gi)[0].match(/src=["'](.*?)["']/)[1]}catch(e){return""}}(e),...this.options.tokens}}_getValueForToken(e,t){var n=this._getTokenMap(t),o=n[e.replace(/[\{\}]/g,"")];if(void 0!==o)return"function"==typeof o?o(t,n):o;throw new Error("Unknown token: "+e+", url:"+this.url)}}function a(e,t){const n={interim:{},lead:"",headline:"",source:""};let o;return o=e.replace(/ - F\.?A\.?Z\.?( - Frankfurter Allgemeine Zeitung)/,"$1").replace(/\+\++ ?/g," ").replace(/(\w)'(\w)/g,"$1’$2").replace(/ - /g," – "),"de"===t?o=o.replace(/"([^"]*)"/g,"„$1“").replace(/'([^']*)'/g,"‚$1‘"):"en"===t?o=o.replace(/"([^"]*)"/g,"“$1”").replace(/'([^']*)'/g,"‘$1’"):"fr"===t&&(o=o.replace(/"([^"]*)"/g,"«$1»").replace(/'([^']*)'/g,"‹$1›")),[n.interim.sourceRemoved,,n.source]=o.split(/( – )(?!.*\1)/),n.interim.sourceRemoved.includes(":")||n.interim.sourceRemoved.includes(" – ")?(n.interim.timeReplaced=n.interim.sourceRemoved.replace(/(\d{2}):(\d{2})/g,"$1{TIME_COLON}$2"),n.interim.leadHeadlineSplit=n.interim.timeReplaced.split(/(: ?| – )/).map(e=>e.replace("{TIME_COLON}",":")),n.interim.leadHeadlineSplit.length>=3?(n.lead=n.interim.leadHeadlineSplit.slice(0,1).join(""),n.headline=n.interim.leadHeadlineSplit.slice(2).join("")):(n.lead="",n.headline=n.interim.sourceRemoved)):(n.lead="",n.headline=n.interim.sourceRemoved),n.headline=n.headline.replace(/ \| \w.*/,""),n.headline=n.headline.slice(0,1).toLocaleUpperCase()+n.headline.slice(1),n}window.RSS=s,window.headliner=a;const l={lang:navigator.language.slice(0,2).toLowerCase()||"de",country:navigator.language.slice(3).toUpperCase()||"DE",city:"Berlin",set geo(e){this.geoData=e,this.country=e.country_code,this.city=e.city},get geo(){return this.geoData}};window.fetch("https://get.geojs.io/v1/ip/geo.json").then(e=>e.json()).then(e=>{l.geo=e,u()}),document.querySelector("#lang").addEventListener("change",u),document.querySelector("#country").addEventListener("change",u);const c=["BILD","B.Z.","STERN","merkur"];function u(){document.querySelector("#edition").textContent=l.country.toUpperCase().replace(/./g,e=>String.fromCodePoint(e.charCodeAt(0)+127397));const e={international:"https://news.google.com/news/rss/headlines/section/topic/WORLD?hl="+l.lang+"&gl="+l.country,national:"https://news.google.com/news/rss/headlines/section/topic/NATION?hl="+l.lang+"&gl="+l.country,local:"https://news.google.com/news/rss/headlines/section/geo/"+encodeURIComponent(l.city)+"?hl="+l.lang+"&gl="+l.country},t={lead:(e,t)=>a(e.title,l.lang).lead,headline:(e,t)=>a(e.title,l.lang).headline,source:(e,t)=>a(e.title,l.lang).source,escapedTitle:(e,t)=>e.title.replace(/"/g,"&quot;").replace(/'/g,"&#039;")};for(const[n,o]of Object.entries(e)){const e=document.querySelector("h3."+n),i=document.querySelector("div."+n);i.innerHTML="","local"===n&&(e.title=l.city),new s(i,o,{support:!1,entryTemplate:document.querySelector("#entry-template").innerHTML,layoutTemplate:document.querySelector("#layout-template").innerHTML,tokens:t,limit:10,filterLimit:4,filter:function(e,t){return!c.some(n=>t.source(e,t).includes(n))}}).render().then(()=>{},e=>{e&&(console.error(e),document.querySelector("#"+n).innerHTML="<p>Feed konnte nicht geladen werden. Bitte prüfe deine Netzwerkverbindung.</p>")})}}document.querySelector("#blacklist").textContent=c.slice(0,-1).join(", ")+" und "+c.slice(-1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,